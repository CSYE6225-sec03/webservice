{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "Create a stack for VPC which has 3 subnets for different region and attach subsets to route table, route with destination CIDR block 0.0.0.0/0 and internet gateway as the target, No hardcoded values",
    
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags":[{"Key" : "Name", "Value": { "Ref": "VPCNAME" }}]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR1"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "0", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
		        "MapPublicIpOnLaunch" : "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Ref": "subnetNAME01"}
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR2"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "1", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
                "MapPublicIpOnLaunch" : "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Ref": "subnetNAME02"}
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR3"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "2", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
                "MapPublicIpOnLaunch" : "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Ref": "subnetNAME03"}
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet7": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR7"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "3", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
                "MapPublicIpOnLaunch" : "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet7"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet8": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR8"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "4", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
                "MapPublicIpOnLaunch" : "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet8"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet4": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR4"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "0", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
		        "MapPublicIpOnLaunch" : "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet4"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet5": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR5"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "1", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
		        "MapPublicIpOnLaunch" : "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet5"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet6": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref" : "SubnetCIDR6"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "2", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                },
		        "MapPublicIpOnLaunch" : "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet6"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties":{
			"Tags":[{"Key" : "Name", "Value": { "Ref": "IGWNAME" }}]
				}
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
		        "Tags":[{"Key" : "Name", "Value": { "Ref": "PUBLICROUTETABLENAME" }}],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },

        "EC2SrtaSubnet1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "EC2SrtaSubnet2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "EC2SrtaSubnet3": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet3"
                }
            }
        },
        "EC2SrtaSubnet7": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet7"
                }
            }
        },
        "EC2SrtaSubnet8": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet8"
                }
            }
        },

        "PublicInternetRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },





        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
		        "Tags":[{"Key" : "Name", "Value": { "Ref": "PRIVATEROUTETABLENAME" }}],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },


        "EC2SrtaSubnet4": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref" : "PrivateRouteTable" },
                "SubnetId": {
                    "Ref": "PublicSubnet4"
                }
            }
        },
        "EC2SrtaSubnet5": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref" : "PrivateRouteTable" },
                "SubnetId": {
                    "Ref": "PublicSubnet5"
                }
            }
        },
        "EC2SrtaSubnet6": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref" : "PrivateRouteTable" },
                "SubnetId": {
                    "Ref": "PublicSubnet6"
                }
            }
        },










        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
               "GroupDescription" : "Create application security group",
               "VpcId" : {"Ref" : "VPC"},
               "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"}},
                    { "IpProtocol" : "tcp", "FromPort" : 8000, "ToPort" : 8000, "SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"}}
                ],
                "Tags":[{"Key" : "Name", "Value": "application"}]
            }
        },

        "LoadBalancerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
               "GroupDescription" : "Create load balancer security group",
               "VpcId" : {"Ref" : "VPC"},
               "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
                ],
                "Tags":[{"Key" : "Name", "Value": "load balancer"}]
            }
        },




















        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": { "Ref": "S3BucketName" },
                "AccessControl": "Private",
                "BucketEncryption" : {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "Rule for assignment5",
                            "Status": "Enabled",
                            "Transitions": [
                                {
                                    "TransitionInDays": 30,
                                    "StorageClass": "STANDARD_IA"
                                }
                            ],
                            "ExpirationInDays": 365
                        }
                    ]
                }
            }
        },

        "DbSecurityByEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for RDS DB Instance.",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [{

                    "IpProtocol": "tcp",
                    "FromPort": 3306,
                    "ToPort": 3306,
                    "SourceSecurityGroupId": {
                        "Ref": "InstanceSecurityGroup"
                    }
                }],
                "Tags":[{"Key" : "Name", "Value": "database"}]
            }
        },

        "RDSDBParameterGroup": {
            "Type": "AWS::RDS::DBParameterGroup",
            "Properties": {
                "Description": "CloudFormation Sample MySQL Parameter Group",
                "Family": "mysql8.0"
            }
        },

        "myDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "description",
                "SubnetIds": [
                    {"Ref" : "PublicSubnet4"},
                    {"Ref": "PublicSubnet5"}
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "mySubnetGroup"
                    }
                ]
            }
        },




        
        "MyDB": {

            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceIdentifier": "csye6225",
                "DBName": "csye6225",
                "DBInstanceClass": "db.t3.micro",
                "MultiAZ":"false",
                "Engine": "MySQL",
                "EngineVersion": "8.0.16",
                "MasterUsername": {
                    "Ref": "DBUsername"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "DBSubnetGroupName" : {
                    "Ref": "myDBSubnetGroup"
                },
                "PubliclyAccessible" : "false",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DbSecurityByEC2SecurityGroup"
                    }
                ],
                "DBParameterGroupName":{
                    "Ref": "RDSDBParameterGroup"
                }
            }
        },



        "RootRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
               "AssumeRolePolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "ec2.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  } ]
               },
               "RoleName": "EC2-CSYE6225",
               "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
               "PolicyName": "WebAppS3",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": [
                        "s3:PutObject",
                        "s3:GetObjectAcl",
                        "s3:GetObject",
                        "s3:ListBucket",
                        "s3:DeleteObject",
                        "s3:PutObjectAcl",
                        "s3:DeleteBucket"
                    ],
                     "Resource": [
                        { "Fn::Sub" : 
                            [ "${ARN}", 
                                { "ARN": 
                                    { "Fn::GetAtt": 
                                        [
                                            "S3Bucket",
                                            "Arn"
                                        ]
                                    }
                                } 
                            ] 
                        },
                        { "Fn::Sub" : 
                            [ "${ARN}/*", 
                                { "ARN": 
                                    { "Fn::GetAtt": 
                                        [
                                            "S3Bucket",
                                            "Arn"
                                        ]
                                    }
                                } 
                            ] 
                        }
                     ]
                  } ]
               },
               "Roles": [ {
                  "Ref": "RootRole"
               } ]
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
               "Path": "/",
               "Roles": [ {
                  "Ref": "RootRole"
               } ]
            }
        },

        "myLoadBalancer":{
            "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties":{
                "IpAddressType" : "ipv4",
                "LoadBalancerAttributes" : [ 
                    {
                        "Key" : "idle_timeout.timeout_seconds",
                        "Value" : "60"
                    }
                ],
                "Name": {"Fn::Sub":"${AWS::StackName}-load-balancer"},
                "Scheme" : "internet-facing",
                "SecurityGroups":[{"Ref" : "LoadBalancerSecurityGroup"}],
                "Subnets" : [{ "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }, { "Ref" : "PublicSubnet3" }, { "Ref" : "PublicSubnet7" }, { "Ref" : "PublicSubnet8" }],
                "Tags":[
                    {
                      "Key":"Application",
                      "Value":"WebApp"
                    },
                    {
                      "Key":"Name",
                      "Value":{"Fn::Sub":"${AWS::StackName}-load-balancer"}
                    }
                ],
                "Type" : "application"
            }
        },
        "myTargetGroup":{
            "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties":{
                "HealthCheckIntervalSeconds": 90,
                "HealthCheckPath" : "/healthz",
                "HealthCheckPort" : "8000",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds" : 60,
                "HealthyThresholdCount" : 2,
                "IpAddressType" : "ipv4",
                "Name": {"Fn::Sub":"${AWS::StackName}-lb-tg"},
                "Port" : 8000,
                "Protocol" : "HTTP",
                "Tags":[
                    {
                      "Key":"Name",
                      "Value":{"Fn::Sub":"${AWS::StackName}-lb-tg"}
                    }
                ],
                "TargetGroupAttributes" : [ 
                    {
                        "Key" : "deregistration_delay.timeout_seconds",
                        "Value" : "20"
                    }
                ],
                "TargetType" : "instance",
                "UnhealthyThresholdCount" : 2,
                "VpcId" : {
                    "Ref": "VPC"
                }
            }
        },
        "myLoadBalancerListener":{
            "Type":"AWS::ElasticLoadBalancingV2::Listener",
            "Properties":{
              "DefaultActions":[
                {
                  "TargetGroupArn":{
                    "Ref":"myTargetGroup"
                  },
                  "Type":"forward"
                }
              ],
              "LoadBalancerArn":{
                "Ref":"myLoadBalancer"
              },
              "Port":80,
              "Protocol":"HTTP"
            }
        },


        "launchConfigurationId": {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "LaunchConfigurationName" : "asg_launch_config",
                "PlacementTenancy" : "default",
                "InstanceType" : "t2.micro",
                "AssociatePublicIpAddress" : "true",
                "IamInstanceProfile" : {"Ref": "RootInstanceProfile"},
                "ImageId" : {"Ref": "AMINAME"},
                "SecurityGroups" : [ {"Ref": "InstanceSecurityGroup"} ],
                "KeyName" : "KeyPair01",
                "BlockDeviceMappings" : [
                    {
                    "DeviceName": "/dev/xvda",
                    "Ebs": {
                        "VolumeType": "gp2",
                        "DeleteOnTermination": "true",
                        "VolumeSize": "20"
                    }
                    }
                ],
                "EbsOptimized" : false,
                "UserData": { 
                    "Fn::Base64": { 
                        "Fn::Join": ["\n",
                            [
                                "#!/bin/bash",
                                "cd /home/ec2-user",
                                {"Fn::Sub": "sudo echo 'hostname=${MyDB.Endpoint.Address}' >> 1.txt"},
                                {"Fn::Sub": "sudo echo 'Dbname=${DBUsername}' >> 1.txt"},
                                {"Fn::Sub": "sudo echo 'PWD=${DBPassword}' >> 1.txt"},
                                {"Fn::Sub": "sudo echo 'BucketName=${S3BucketName}' >> 1.txt"},
                                "cd /home/ec2-user/webservice/DjangoAPI",
                                {"Fn::Sub": "sudo echo 'a=1' >> 2.txt"},
                                "sudo python3 manage.py makemigrations",
                                "sudo python3 manage.py migrate",
                                "cd /home/ec2-user",
                                "sudo cp webservice.service /usr/lib/systemd/system",
                                "sudo systemctl daemon-reload",
                                "sudo systemctl enable webservice.service",
                                "sudo systemctl start webservice.service"
                            ]
                        ]
                    }
                }
            }
        },

        "autoScalingGroupId": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AutoScalingGroupName" : {"Fn::Sub":"${AWS::StackName}-asg"},
                "Cooldown" : "60",
                "DesiredCapacity" : "3",
                "HealthCheckType" : "EC2",
                "LaunchConfigurationName" : {"Ref": "launchConfigurationId"},
                "MinSize" : "1",
                "MaxSize" : "5",
                "MetricsCollection" : [ {
                  "Granularity" : "1Minute",
                  "Metrics" : [ 
                    "GroupInServiceInstances",
                    "GroupPendingInstances",
                    "GroupStandbyInstances",
                    "GroupTerminatingInstances",
                    "GroupTotalInstances" 
                  ]
                } ],
                "TargetGroupARNs" : [{"Ref":"myTargetGroup"}],
                "TerminationPolicies" : [ "OldestInstance","Default" ],
                "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }, { "Ref" : "PublicSubnet3" }, { "Ref" : "PublicSubnet7" }, { "Ref" : "PublicSubnet8" }],
                "Tags":[
                    {
                    "Key":"Application",
                    "Value":"WebApp",
                    "PropagateAtLaunch":"true"
                    },
                    {
                    "Key":"Name",
                    "Value":{"Fn::Sub":"${AWS::StackName}-asg"},
                    "PropagateAtLaunch":"true"
                    }
                ]
            }
        },


        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {"Ref": "autoScalingGroupId"},
              "Cooldown": "60",
              "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {"Ref": "autoScalingGroupId"},
              "Cooldown": "60",
              "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-up if CPU > 5% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "60",
              "EvaluationPeriods": "2",
              "Threshold": "5",
              "AlarmActions": [ {"Ref": "WebServerScaleUpPolicy"} ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {"Ref": "autoScalingGroupId"}
                }
              ],
              "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-down if CPU < 1% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "60",
              "EvaluationPeriods": "2",
              "Threshold": "3",
              "AlarmActions": [ {"Ref": "WebServerScaleDownPolicy"} ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {"Ref": "autoScalingGroupId"}
                }
              ],
              "ComparisonOperator": "LessThanThreshold"
            }
        },


        "myDNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : { 
                    "Ref" : "HostedZoneResource" 
                },
                "Name" : { 
                    "Ref" : "HostedZoneResource" 
                },
                "Comment" : "DNS name for my instance.",  
                "Type" : "A",
                "AliasTarget" : {
                    "HostedZoneId" : {
                        "Fn::GetAtt":[
                        "myLoadBalancer",
                        "CanonicalHostedZoneID"
                        ]
                    },
                    "DNSName" : {
                        "Fn::GetAtt":[
                        "myLoadBalancer",
                        "DNSName"
                        ]
                    },
                    "EvaluateTargetHealth" : "true"
                }
            }
        }

    },
    
    "Parameters": {

        

        "AMINAME": {
            "Description" : "The AMI name",
            "Type": "String",
            "Default": "ami-07b06f5f45dcc727b"
  
        },

        "VPCNAME": {
          "Description" : "The stack name",
          "Type": "String",
          "Default": "myVPC"

        },
        "subnetNAME01": {
            "Description" : "The subnet name",
            "Type": "String",
            "Default": "subnet1"
  
        },
        
        "subnetNAME02": {
            "Description" : "The subnet name",
            "Type": "String",
            "Default": "subnet2"
        },

        "subnetNAME03": {
            "Description" : "The subnet name",
            "Type": "String",
            "Default": "subnet3"
  
        },

        "IGWNAME": {
          "Description" : "The Internet Gateway name",
          "Type": "String",
          "Default": "myIGW"
        },

        "PUBLICROUTETABLENAME": {
          "Description" : "The Public Route Table name",
          "Type": "String",
          "Default": "myPRT"
        },
        "PRIVATEROUTETABLENAME": {
            "Description" : "The Private Route Table name",
            "Type": "String",
            "Default": "myPrivateRT"
        },

        "VPCCIDR": {
            "Type": "String",
            "Description": "IP Address range for the connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.0/16"
        },

        "SubnetCIDR1": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.1.0/24"
        },
        "SubnetCIDR2": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.2.0/24"
        },

        "SubnetCIDR3": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.3.0/24"
        },
        "SubnetCIDR4": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.4.0/24"
        },
        "SubnetCIDR5": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.5.0/24"
        },
        "SubnetCIDR6": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.6.0/24"
        },
        "SubnetCIDR7": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.7.0/24"
        },
        "SubnetCIDR8": {
            "Type": "String",
            "Description": "IP Address range for the subnet connected VPC",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.8.0/24"
        },
        "DBAllocatedStorage": {
            "Default": "20",
            "Description": "The size of the database (GiB)",
            "Type": "Number",
            "MinValue": "20",
            "MaxValue": "65536",
            "ConstraintDescription": "must be between 20 and 65536 GiB."
        },
        "DBPassword": {
            "Default": "He59kop24",
            "NoEcho": "true",
            "Description": "Password MySQL database access",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "S3BucketName": {
            "Description" : "S3BucketName",
            "Default": "csye6225.demo.chunjunhu.me",
            "Type": "String"
        },
        "DBUsername": {
            "Default": "csye6225",
            "NoEcho": "true",
            "Description": "Username for MySQL database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "HostedZoneResource": {
            "Description" : "The Internet Gateway name",
            "Type": "String",
            "Default": "prod.chunjunhu.me."
        }
    }
}